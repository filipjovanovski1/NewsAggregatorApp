// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewsApplication.Repository.Db;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NewsApplication.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251024105640_AddSearchRows")]
    partial class AddSearchRows
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NewsApplication.Domain.DomainModels.Article", b =>
                {
                    b.Property<string>("ArticleId")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PublishedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ArticleId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("NewsApplication.Domain.DomainModels.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CountryIso2")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryIso2");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("NewsApplication.Domain.DomainModels.Country", b =>
                {
                    b.Property<string>("Iso2")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<double?>("CentroidLat")
                        .HasColumnType("double precision");

                    b.Property<double?>("CentroidLng")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Iso2");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("NewsApplication.Domain.Helpers.ArticleScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("CountryIso2")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("OtherValue")
                        .HasMaxLength(168)
                        .HasColumnType("character varying(168)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId", "CityId")
                        .IsUnique()
                        .HasFilter("\"CityId\" IS NOT NULL AND \"Kind\" = 1");

                    b.HasIndex("ArticleId", "CountryIso2")
                        .IsUnique()
                        .HasFilter("\"CountryIso2\" IS NOT NULL AND \"Kind\" = 2");

                    b.HasIndex("ArticleId", "OtherValue")
                        .IsUnique()
                        .HasFilter("\"OtherValue\" IS NOT NULL AND \"Kind\" = 3");

                    b.ToTable("ArticleScopes", null, t =>
                        {
                            t.HasCheckConstraint("CK_ArticleScope_ExactlyOneKey", "(CASE WHEN \"CityId\" IS NULL THEN 0 ELSE 1 END) + (CASE WHEN \"CountryIso2\" IS NULL THEN 0 ELSE 1 END) + (CASE WHEN \"OtherValue\" IS NULL THEN 0 ELSE 1 END) = 1");
                        });
                });

            modelBuilder.Entity("NewsApplication.Repository.Db.Configurations.ScopeHelpers.CitySearchRow", b =>
                {
                    b.Property<string>("CountryIso2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.ToTable("CitySearchRow");
                });

            modelBuilder.Entity("NewsApplication.Repository.Db.Configurations.ScopeHelpers.CountrySearchRow", b =>
                {
                    b.Property<string>("CountryIso2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.ToTable("CountrySearchRow");
                });

            modelBuilder.Entity("NewsApplication.Domain.DomainModels.City", b =>
                {
                    b.HasOne("NewsApplication.Domain.DomainModels.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryIso2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("NewsApplication.Domain.Helpers.ArticleScope", b =>
                {
                    b.HasOne("NewsApplication.Domain.DomainModels.Article", "Article")
                        .WithMany("Scopes")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("NewsApplication.Domain.DomainModels.Article", b =>
                {
                    b.Navigation("Scopes");
                });
#pragma warning restore 612, 618
        }
    }
}
